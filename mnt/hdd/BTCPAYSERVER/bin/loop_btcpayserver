#! /bin/bash


set -o noglob

#set -x


lncliCMD () {

        error="false"
        errmsg=

        ret=$(lncli --macaroonpath=/mnt/hdd/mynode/lnd/data/chain/bitcoin/mainnet/admin.macaroon --rpcserver=localhost:10009 --lnddir=/mnt/hdd/mynode/lnd $* 2>1)

        status=$?

        if [ ! $status -eq 0 ]
        then
          error="true"
          errmsg="$ret"
          echo "{"error": true, "message": "$ret" }"
          return 
        fi
        echo "$ret"
}

   echo Waiting for payments

total=0
totalinvoices=0

LOCALNODE=$(lncliCMD getinfo)

if [ "$error" = "true" ]
then
   echo "Can not get info about local node"
   exit 1
fi


LOCALNODE=$(echo "$LOCALNODE"|jq -r .identity_pubkey)

echo Localnode is $LOCALNODE

if [ -z "$LOCALNODE" ] || [ "$LOCALNODE" = "null" ]
then
   echo "Can not get info about local node"
   exit 1
fi

while [ true ]
do

localpaid=0

EXEDIR=$(dirname $0)

QUERY=$EXEDIR/psql_query


BASEDIR=/mnt/hdd/BTCPAYSERVER
INVOICES=$BASEDIR/invoices
DONEDIR=$BASEDIR/done
INVALID=$BASEDIR/invalid
ONCHAIN=$BASEDIR/onchain
NONCUSTODIAL=$BASEDIR/noncustodial
DUPLICATE=$BASEDIR/duplicate
ZERO=$BASEDIR/zero

install -d $INVALID
install -d $DONEDIR 
install -d $ONCHAIN
install -d $DUPLICATE
install -d $NONCUSTODIAL

if [ ! -x $EXEDIR/doit ]
then
   file $EXEDIR/doit not found
   exit 1 
fi

if [ -f $BASEDIR/conf/payer.conf ]
then
  . $BASEDIR/conf/payer.conf
fi

if [ -z "$PAYER" ]
then
   echo We need a PAYER token
   exit 1
fi

if [ -z "$RATE" ]
then
   echo We need a RATE value
   exit 1
fi

files=0

set +o noglob
for i in $INVOICES/*.control 
do
  set -o noglob
  
   if [ ! -f "$i" ]
   then
      	##echo file $i does not exists
        continue
   fi 

  echo Processing file $i

   TOKEN=""
   FILE=""
      
   . $i  
   if [ -z "$TOKEN" ] || [ -z "$FILE" ]
   then
        echo $i contains invalid data. Keeping control file and continuing
        continue
   fi

   if [ ! -f "$FILE" ]
   then
        echo $FILE does not exists. Keeping control file and continuing
        continue
   fi

	# wait some time until some writes are done
   sleep 2

   storeId=$(cat $FILE|jq -r .storeId)

   type=$(cat $FILE|jq -r .type)
   if [ "$type" != "InvoicePaymentSettled" ]
   then 
        echo $FILE does not have a valid invoice type: $type expected [InvoicePaymentSettled]. Moving file to $INVALID
        mv $FILE $INVALID/ 
        mv $i $INVALID/        
        continue
   fi   


   value=$(cat $FILE|jq -r .payment.value)

   if [ -z "$value" ] 
   then 
        echo $FILE does not have a valid invoice value: $value. Keeping control file and continuing
        continue
   fi
   iValue=$( printf "%.0f" $(echo $value*100000000 | bc -l))


	# todo
        #check if it is a donation pay

   #if it is not donation
      #check if invoice was paid to us
      storeinvoice=$(cat $FILE|jq -r .payment.destination)
      echo $FILE paid invoice is $storeinvoice
      if [ -z "$storeinvoice" ]
      then
         echo $FILE does not have a valid destination invoice. Moving file to $INVALID
         mv $FILE $INVALID/ 
         mv $i $INVALID/        
	 continue
      fi

      payreq=$(lncliCMD decodepayreq "$storeinvoice")
      destination=$(echo "$payreq"|jq -r .destination)
      echo $FILE destination invoice is $destination
       		
      if [ "$destination" != "$LOCALNODE" ]
      then     
         echo $FILE payed invoice is not to our node. Moving file to $NONCUSTODIAL
         mv $FILE $NONCUSTODIAL/ 
         mv $i $NONCUSTODIAL/        
	 continue
      fi
      phash=$(echo "$payreq"|jq -r .payment_hash)
      finalinvoice=$(lncliCMD lookupinvoice "$phash")
      isPaid=$(echo "$finalinvoice"|jq -r .state)
      echo $FILE invoice state is $isPaid

      if [ "$isPaid" != "SETTLED" ]
      then
         echo $FILE invoice is not in SETTLED state. Moving file to $INVALID
         mv $FILE $INVALID/ 
         mv $i $INVALID/        
	 continue
      fi
      
         #check for paid amount	
      paidAmount=$(printf "%.0f" $(echo "$finalinvoice"|jq -r .amt_paid_sat))

      echo $FILE invoice paid amount is $paidAmount sats. Required is $iValue sats 

      if [ ! $paidAmount -eq $iValue   ]
      then
         echo $FILE invoice does not have same amount paid. Moving file to $INVALID
         mv $FILE $INVALID/ 
         mv $i $INVALID/        
	 continue
      fi

      	
   #end of non donation
 
   amount=$( printf "%.0f" $(echo $iValue*$RATE | bc -l))

   if [ $amount -eq $iValue ]
   then
      echo $FILE resulting fee equals to zero. 
      amount=$(echo $iValue-1|bc -l )
   fi

   echo Amount: $amount iValue: $iValue value: $value

   if [ ! $amount -gt 0 ]
   then 
      echo $FILE resulting amount is not grater than 0: $amount. Moving to $ZERO
      mv $FILE $ZERO/ 
      mv $i $ZERO/        
      continue
   fi

   method=$(cat $FILE|jq -r .paymentMethod)

   if [ -z "$method" ] 
   then 
        echo $FILE does not have a valid paymentMethod: $method. Moving file to $INVALID
        mv $FILE $INVALID/ 
        mv $i $INVALID/        
        continue
   fi

   if [ "$method" = "BTC" ] 
   then 
        echo $FILE is ONCHAIN payment. Moving file to $ONCHAIN
        mv $FILE $ONCHAIN/ 
        mv $i $ONCHAIN/        
        continue
   fi

   if [ ! "$method" = "BTC-LightningNetwork" ] 
   then 
        echo $FILE does not have a recognized paymentMethod: $method. Moving file to $INVALID
        mv $FILE $INVALID/ 
        mv $i $INVALID/        
        continue
   fi       

   id=$(cat $FILE|jq -r .invoiceId)

   if [ -z "$id" ] 
   then 
        echo $FILE does not have a invoice Id: $id. Keeping control file and continuing
        continue
   fi

   echo processing payid $id

	#Verificar se já foi pago...      

   query=$($QUERY "select * from invoices where id = '$id' ")
   paid=$(echo "$query"|jq -r .[0].paid)
   invoice=$(echo "$query"|jq -r .[0].invoice)
   if [ "$invoice" = "null" ] 
   then
      invoice=
   else
      echo $FILE has already an generated invoice: $invoice
   fi


   echo Paid result query is $paid 

   if [ "$paid" = "null" ] || [ "$paid" = "" ]
   then
      paid=0
   else 
     if [ $paid -gt 0 ]
     then
        echo $FILE already paid $paid: $method. Moving file to $DUPLICATE
        mv $FILE $DUPLICATE/ 
        mv $i $DUPLICATE/
        continue
     fi        
   fi
   
   #exit 1;
    
   $EXEDIR/doit $TOKEN $amount $iValue "Pgto da fatura $id" "$invoice" "$id" "$storeId"

   status=$?

   if [ $status -eq 5 ]; then
      #rety

      $EXEDIR/doit $TOKEN $amount $iValue "Pgto da fatura $id" "$invoice" "$id" "$storeId"

      status=$?
   fi


   if [ ! $status -eq 0 ]; then
      echo error while processing $FILE. Keeping control file and continuing
      continue
   fi   
   mv $FILE $DONEDIR/ 
   mv $i $DONEDIR/ 
   ((files++))
   ((localpaid+=amount)) 
   ((total+=amount)) 
   ((totalinvoices++))

done
   if [ $files -gt 0 ]
   then
      echo
      echo +++++++++++++++++++++++++++++++++++++++++++
      echo Paid $localpaid sats in $files invoice\(s\)
      echo Total paid $total sats in $totalinvoices invoice\(s\)
      echo +++++++++++++++++++++++++++++++++++++++++++
      echo
      echo Waiting for payments
   fi
   ##Wait for a invoice to come   
   inotifywait -qq -t 60 /mnt/hdd/BTCPAYSERVER/invoices/ 


done