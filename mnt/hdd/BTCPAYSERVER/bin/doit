#! /bin/bash

set -o noglob

#set -x

BASEDIR=/mnt/hdd/BTCPAYSERVER

QUERY=/mnt/hdd/BTCPAYSERVER/bin/psql_query

if [ -f $BASEDIR/conf/payer.conf ]
then
   . $BASEDIR/conf/payer.conf
fi

PAYERINVOICEFILE=$BASEDIR/conf/payer_invoice

if [ -f $PAYERINVOICEFILE ]
then
 . $PAYERINVOICEFILE
fi

if [ "$PAYERINVOICE" = "1" ]
then
      PAYERINVOICE=""
fi

PREFERENCIALCHANNELS="$PREFERENCIALCHANNELS 0"

tokenStore=$1


if [ -z "$tokenStore" ]
then
   echo you have to inform a token
   exit 1
fi

amount=$2
originalAmount=$3
memo=$4
oldInvoice=$5
paymentId=$6
storeId=$7

if [ -z "$storeId" ]
then
   echo you have to inform a store Id
   exit 1
fi

if [ -z "$paymentId" ]
then
   echo you have to inform a payment Id
   exit 1
fi

if [ -z "$amount" ]
then
   echo you have to inform an amount
   exit 1
fi

if [ -z "$originalAmount" ]
then
   echo you have to inform an original amount
   exit 1
fi

if [ -z "$memo" ]
then
   echo you have to inform a memo
   exit 1
fi


parse () {
   error=$(echo $ret|jq .error)
   errmsg=$(echo $ret|jq .message)
}

lncliCMD () {

        ret=$(lncli --macaroonpath=/mnt/hdd/mynode/lnd/data/chain/bitcoin/mainnet/admin.macaroon --rpcserver=localhost:10009 --lnddir=/mnt/hdd/mynode/lnd $* &2>1)

        status=$?

        if [ ! $status -eq 0 ]
        then
          error="lncli error"
          errmsg="$ret"
        fi
        echo "$ret"

}

payByLND () {
#set -x
       _invoice="$1"
       controla="$2"
       maxfee=$3

       if [ -n "$maxfee" ]
       then
           maxfee="----fee_limit $maxfee"
       fi


       if [ -z "$controla" ]; then

         echo PAYERINVOICE=\"$_invoice\" > $PAYERINVOICEFILE

       fi

       echo invoice to pay bylncli \[$_invoice\]
     
       # set error
       error="true"
       for channel in $PREFERENCIALCHANNELS
       do
        if [ -n "$channel" ] && [ $channel != '0' ]
        then
            channel=\-\-outgoing_chan_id\ $channel
        fi

        ret=$(lncli --macaroonpath=/mnt/hdd/mynode/lnd/data/chain/bitcoin/mainnet/admin.macaroon --rpcserver=localhost:10009 --lnddir=/mnt/hdd/mynode/lnd payinvoice $maxfee -f --allow_self_payment $channel "$_invoice" &2>1)

        status=$?


        if echo "$ret" | grep "invoice is already paid" &> /dev/null
        then
            echo "Already paid"
            status=0
        fi

        if [ $status -eq 0 ]
        then
          error=
          [ -z "$controla" ] && echo -n > $PAYERINVOICEFILE
          break
        fi

       done

#set +x

}


parsetoken () {
   token=$1
   user=$(echo "$token" | grep -o -P '(?<=://).*(?=@)')
   pass=$(echo "$user" | grep -o -P '(?<=:).*(?=)')
   user=$(echo "$user" | grep -o -P '(?<=).*(?=:)')
   host=$(echo "$token" | grep -o -P '(?<=@).*(?=)')
#   echo $user
#   echo $pass
#   echo $host
#   echo $token
}

post () {

	_url=$1
	_token=$2
	_data=$3
	tk=''
	if [ -n "$_token" ]
	then
		_tk=Authorization:\ Bearer\ $_token
	fi
        ret=$(curl -ss --insecure -d "$_data" -H 'Content-Type: application/json' -H "$_tk" -X POST "$_url" )
##H 'Content-Type: application/json'
	status=$?
        if [ ! $status -eq 0 ]; then
   	     error='Unknow'
	     errmsg="$ret: error while reading from $_url"
             echo $errmsg             
	     exit
	fi   

	parse "$ret"
#echo $ret
}

get () {

	_url=$1
	_token=$2
	tk=''
	if [ -n "$_token" ]
	then
		_tk=Authorization:\ Bearer\ $_token
	fi
        ret=$(curl -ss --insecure -H 'Content-Type: application/json' -H "$_tk" -X GET "$_url" )
	status=$?
        if [ ! $status -eq 0 ]; then
   	     error='Unknow'
	     errmsg=$ret
	     exit
	fi   

	parse "$ret"
}



generate () {
   _host=$1
   _token=$2
   _amt=$3
   _memo=$4
   
   js=$(jq -c --null-input \
		  --arg amt $_amt \
		  --arg memo "$_memo" \
		  '{"amt": $amt, "memo": $memo}')
   cmd=addinvoice
   url=$_host$cmd
	echo $url
	echo $_token
	echo $js

   post $url $_token "$js"
   payment_request=$(echo $ret | jq -r .payment_request )


}

login () {

	_host=$1
	_user=$2
	_pass=$3
	js=$(jq -c --null-input \
		  --arg user "$_user" \
		  --arg password "$_pass" \
		  '{"login": $user, "password": $password}')

	auth=auth?type=auth
	url=$_host$auth
        post $url "" "$js"
        #ret=$(curl -ss --insecure -d "$js" -X POST $url  -H 'Content-Type: application/json' )

   	token=$(echo $ret | jq -r .access_token )


}

getBalance () {
    _host=$1
    _token=$2 

    cmd=balance
    url=$_host$cmd
    get $url $_token
    echo $ret
    balance=$(echo $ret | jq -r .BTC.AvailableBalance )

    if [ "$balance" = "null" ] || [ "$balance" = "" ]
    then
       balance=0
    fi
}

pay () {
    _host=$1
    _token=$2 
    _invoice="$3"

    js=$(jq -c --null-input \
		  --arg invoice "$_invoice" \
		  '{"invoice": $invoice}')


    cmd=payinvoice
    url=$_host$cmd
    echo $js
    post $url $_token "$js"
   echo $ret

}

# There is some trouble @ BBB's node 
#   /usr/bin/wait_on_lnd.sh
#   status=$?
#   if [ ! $status -eq 0 ]; then
#      echo LND not ready
#      exit 1
#   fi   


if [ -z "$PAYER" ]
then
   echo PAYER not set
   exit 1
fi

parsetoken $PAYER
userPayer=$user
passPayer=$pass
hostPayer=$host

if [ -z "$userPayer" ] || [ -z "$passPayer" ] || [ -z "$hostPayer" ]
then
   echo Invalid PAYER token
   exit 1
fi


parsetoken $(echo $tokenStore|base64 --decode)
userStore=$user
passStore=$pass
hostStore=$host

if [ -z "$userStore" ] || [ -z "$passStore" ] || [ -z "$hostStore" ]
then
   echo Invalid STORE token
   exit 1
fi	
#exit 1

   #Perform login to store service
login $hostStore $userStore $passStore
if [ "$error" = "true" ]
then
  echo error: [$errmsg]
  exit 1
fi

if [ "$token" = "null" ]
then
   echo "Could not login to store server... [$ret]"
   exit 1
fi

tokenStore=$token
#echo tokenStore: $tokenStore


   #Perform login to payer service
login $hostPayer $userPayer $passPayer
if [ "$error" = "true" ]
then
  echo error: [$errmsg]
  exit 1
fi

if [ "$token" = "null" ]
then
   echo "Could not login to payer server... [$ret]"
   exit 1
fi

tokenPayer=$token
#echo tokenPayer: $tokenPayer

getBalance $hostPayer $tokenPayer

if [ "$error" = "true" ]
then
  echo error: [$errmsg]
  exit 1
fi

if [ $amount -lt 100000 ] && [ $(echo $amount*2 | bc -l) -gt $balance ]
then
   echo "Amount greater than balance... Trying to feed wallet"

   payment_request=$PAYERINVOICE
   echo before ["$PAYERINVOICE"] ["$payment_request"]

   if [ -z "$PAYERINVOICE" ]
   then

     generate $hostPayer $tokenPayer 100000 "Payer recharge"

     if [ "$payment_request" = "null" ]
     then
       echo "Could not get invoice... [$ret]"
       exit 1
     fi
     echo generated PAYER invoice ["$payment_request"]
   else
     echo Previous PAYER invoice  ["$payment_request"]
   fi

   payByLND "$payment_request"

      #retry
   exit 5
fi


if [ -z "$oldInvoice" ]
then
   generate $hostStore $tokenStore $amount "$memo"

   if [ "$payment_request" = "null" ]
   then
     echo "Could not get invoice... [$ret]"
     exit 1
   fi
   echo generated invoice [$payment_request]
   $QUERY "insert into invoices(id,dh,amount,invoice,originalAmount,fee, store) values ('$paymentId','now',$amount, '$payment_request', $originalAmount, $(echo $originalAmount-$amount|bc -l ), '$storeId' )" insert
   #exit 1

else
   payment_request=$oldInvoice
fi

invoice=$payment_request

if [ $amount -lt 100000 ]
then
   echo Paying by lnbits
   pay $hostPayer $tokenPayer "$invoice"
else
   echo Paying by lncli
   payByLND "$invoice" N 
fi


if [ "$error" = "true" ]
then
  echo error while paying invoice: [$errmsg]
  exit 1
fi

   $QUERY "update invoices set paid=$amount where id='$paymentId' " update

exit 0